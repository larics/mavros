#!/usr/bin/env python

from __future__ import print_function

import sys
import argparse
import rospy
import mavros

from tf.transformations import quaternion_from_euler
from sensor_msgs.msg import Joy
from std_msgs.msg import Header, Float64, Empty
from geometry_msgs.msg import Pose, PoseStamped, Twist, TwistStamped, Vector3, Quaternion, Point
from mavros_msgs.msg import OverrideRCIn
from mavros import command
from mavros import setpoint as SP

# Mode 2 on Logitech F710 gamepad
axes_map = {
    'roll': 0,
    'pitch': 1,
    'yaw': 2,
    'throttle': 3
}

axes_scale = {
    'roll': -0.5,
    'pitch': 0.5,
    'yaw': 0.5,
    'throttle': 1.0
}

# XXX: todo
button_map = {
    'teleop_toggle' : 0,
    'clear_integrals' : 1,
    'set_takeoff_setpoint': 2,
    'set_land_setpoint': 3,
    'tracking':4,
    'origin_hover':5,
    'arm': 6,
    'disarm': 7,
    's1':8,
    's2':9,
    's3':10,
    's4':11
}

def arm(args, state):
    try:
        ret = command.arming(value=state)
    except rospy.ServiceException as ex:
        fault(ex)

    if not ret.success:
        rospy.loginfo("Request failed.")
    else:
        rospy.loginfo("Request success.")


def load_map(m, n):
    for k, v in m.iteritems():
        m[k] = rospy.get_param(n + k, v)


def get_axis(j, n):
    return j.axes[axes_map[n]] * axes_scale[n]

def get_buttons(j, n):
    return j.buttons[ button_map[n]]

class teleopControl:
    def __init__(self,args):
        self.args = args
        rospy.loginfo("MAV-Teleop: Position Setpoint(and Tracking) control type.")
    
        load_map(axes_map, '~axes_map/')
        load_map(axes_scale, '~axes_scale/')
        load_map(button_map, '~button_map/')
        
        self.set_point_pub = rospy.Publisher( '/mavros/setpoint_position/local', PoseStamped, queue_size=10 )
       
        self.teleop_enabled = True
   
        jsub = rospy.Subscriber("joy", Joy, self.joy_cb)

        self.cur_pose = PoseStamped()
        self.publishedPose= PoseStamped()
        self.publishedPose.pose.orientation.w=1.0
    
        mocap_sub = rospy.Subscriber("/mavros/vision_pose/pose", PoseStamped, self.cur_pose_cb)
        self.track_pose = PoseStamped()        
        mocap_track_sub=rospy.Subscriber("/Robot_2/pose",PoseStamped, self.track_pose_cb)
        rospy.spin()

    def cur_pose_cb(self,msg):
        self.cur_pose = msg
        
    def track_pose_cb(self,msg):
        self.track_pose=msg
    
    def joy_cb(self,joy):
        # get axes normalized to -1.0..+1.0 RPY, 0.0..1.0 T
        roll = get_axis(joy, 'roll')
        pitch = get_axis(joy, 'pitch') + 0.022
        yaw = get_axis(joy, 'yaw')
        throttle = (get_axis(joy, 'throttle') + 1.0)/2.0
    
        rospy.logdebug("RPYT: %f, %f, %f, %f", roll, pitch, yaw, throttle)
    
        if (get_buttons(joy,'teleop_toggle') == 1):
            self.teleop_enabled = False
            print("setpoint enabled")
           
        else:
            self.teleop_enabled = True
            
        if (get_buttons(joy,'set_land_setpoint') == 1):
            self.publishedPose = self.cur_pose
            self.publishedPose.pose.position.z = 0.0
            self.set_point_pub.publish(self.publishedPose)
        
        if (get_buttons(joy,'origin_hover') == 1):
            self.publishedPose = self.cur_pose
            self.publishedPose.pose.position.x = 0.0
            self.publishedPose.pose.position.y = 0.0
            self.publishedPose.pose.position.z = 1.0
            self.set_point_pub.publish(self.publishedPose)

        if (get_buttons(joy,'s1') == 1):
            self.publishedPose= self.cur_pose
            self.publishedPose.pose.position.x = 0.5
            self.publishedPose.pose.position.y = -0.5
            self.set_point_pub.publish(self.publishedPose)

        if (get_buttons(joy,'s2') == 1):
            self.publishedPose= self.cur_pose
            t.pose.position.x = -0.5
            t.pose.position.y = -0.5
            self.set_point_pub.publish(self.publishedPose)

        if (get_buttons(joy,'s3') == 1):
            self.publishedPose= self.cur_pose
            self.publishedPose.pose.position.x = 0
            self.publishedPose.pose.position.y = -1
            self.publishedPose.pose.position.z = 1
            self.set_point_pub.publish(self.publishedPose)

        if (get_buttons(joy,'s4') == 1):
            self.publishedPose= self.cur_pose
            self.publishedPose.pose.position.x = -0.5
            self.publishedPose.pose.position.y = 0.5
            self.set_point_pub.publish(self.publishedPose)

        if (get_buttons(joy,'set_takeoff_setpoint') == 1):
            self.publishedPose = self.cur_pose
            self.publishedPose.pose.position.z = 1.0
            self.set_point_pub.publish(self.publishedPose)
        
        if (get_buttons(joy,'tracking') == 1):
            self.publishedPose= self.track_pose
            self.publishedPose.pose.position.z = 1.0
            self.set_point_pub.publish(self.publishedPose)

        if (get_buttons(joy, 'arm') == 1):
            arm( self.args , True)

        if (get_buttons(joy, 'disarm') == 1):
            arm( self.args , False)
 
        self.publishedPose.header.stamp=rospy.Time.now()
        self.set_point_pub.publish(self.publishedPose)

def main():
    parser = argparse.ArgumentParser(description="Teleoperation with toggle to alternate controller")
    parser.add_argument('-n', '--mavros-ns', help="ROS node namespace", default="/mavros")
    parser.add_argument('-v', '--verbose', action='store_true', help="verbose output")

    args = parser.parse_args(rospy.myargv(argv=sys.argv)[1:])

    rospy.init_node("mavteleop")
    mavros.set_namespace(args.mavros_ns)

    tc = teleopControl(args)


if __name__ == '__main__':
    main()
